//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApplication11
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MmasweEntities13 : DbContext
    {
        public MmasweEntities13()
            : base("name=MmasweEntities13")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Access_level> Access_level { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Adress_Type> Adress_Type { get; set; }
        public virtual DbSet<Audit> Audits { get; set; }
        public virtual DbSet<Banking_Details> Banking_Details { get; set; }
        public virtual DbSet<Check_In> Check_In { get; set; }
        public virtual DbSet<Check_In_Line> Check_In_Line { get; set; }
        public virtual DbSet<Check_Out> Check_Out { get; set; }
        public virtual DbSet<Check_Out_Line> Check_Out_Line { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Combo> Comboes { get; set; }
        public virtual DbSet<Combo_Price> Combo_Price { get; set; }
        public virtual DbSet<Combo_Type> Combo_Type { get; set; }
        public virtual DbSet<Company_Information> Company_Information { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Customer_Order> Customer_Order { get; set; }
        public virtual DbSet<Customer_Order_Line> Customer_Order_Line { get; set; }
        public virtual DbSet<Delivery_Status> Delivery_Status { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Employee_Attendence_Status> Employee_Attendence_Status { get; set; }
        public virtual DbSet<Employee_Booking_Shift> Employee_Booking_Shift { get; set; }
        public virtual DbSet<Employee_Gender_> Employee_Gender_ { get; set; }
        public virtual DbSet<Employee_Shifts> Employee_Shifts { get; set; }
        public virtual DbSet<ItemsPicture> ItemsPictures { get; set; }
        public virtual DbSet<Menu_Item> Menu_Item { get; set; }
        public virtual DbSet<Menu_Item_Price> Menu_Item_Price { get; set; }
        public virtual DbSet<Menu_Item_Type> Menu_Item_Type { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<Payment_Type> Payment_Type { get; set; }
        public virtual DbSet<Quantity> Quantities { get; set; }
        public virtual DbSet<Special> Specials { get; set; }
        public virtual DbSet<Stock_Combo_Line> Stock_Combo_Line { get; set; }
        public virtual DbSet<Stock_Item> Stock_Item { get; set; }
        public virtual DbSet<Stock_Order> Stock_Order { get; set; }
        public virtual DbSet<Stock_Order_Line> Stock_Order_Line { get; set; }
        public virtual DbSet<Stock_Order_Status> Stock_Order_Status { get; set; }
        public virtual DbSet<Stock_Price> Stock_Price { get; set; }
        public virtual DbSet<Stock_Type> Stock_Type { get; set; }
        public virtual DbSet<Stock_Write_Off> Stock_Write_Off { get; set; }
        public virtual DbSet<Stock_WriteOff_Line> Stock_WriteOff_Line { get; set; }
        public virtual DbSet<Suburb> Suburbs { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<Supplier_Contact_Details> Supplier_Contact_Details { get; set; }
        public virtual DbSet<Supplier_Type> Supplier_Type { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<User_Log> User_Log { get; set; }
        public virtual DbSet<User_Role> User_Role { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
